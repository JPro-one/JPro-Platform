buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            url "https://sandec.jfrog.io/artifactory/repo"
        }
    }

    dependencies {
        classpath "com.google.gradle:osdetector-gradle-plugin:$OSDETECTOR_PLUGIN_VERSION"
        classpath "org.openjfx:javafx-plugin:$JAVAFX_PLUGIN_VERSION"
        classpath "one.jpro:jpro-gradle-plugin:$JPRO_VERSION"
        classpath "org.owasp:dependency-check-gradle:$DEPENDENCY_CHECK_PLUGIN_VERSION"
        classpath "tech.yanand.gradle:maven-central-publish:$MAVEN_CENTRAL_PUBLISH_PLUGIN_VERSION"
    }
}

subprojects {
    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenCentral()
        maven {
            url "https://sandec.jfrog.io/artifactory/repo"
        }
    }
}

configure(subprojects.findAll { it.name != 'example' }) {
    apply plugin: 'java-library'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'org.owasp.dependencycheck'

    javafx {
        version = "$JAVAFX_VERSION"
        configurations = ["compileOnly", "testImplementation"]
        modules = ['javafx.graphics', 'javafx.controls', 'javafx.fxml', 'javafx.media', 'javafx.swing', 'javafx.web']
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$JUNIT_VERSION"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$JUNIT_VERSION"

        testImplementation "one.jpro:jmemorybuddy:$JMEMORYBUDDY_VERSION"
        testImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
        testImplementation "org.mockito:mockito-junit-jupiter:$MOCKITO_VERSION"
        testImplementation "org.hamcrest:hamcrest:$HAMCREST_VERSION"
        testImplementation "org.assertj:assertj-core:$ASSERTJ_VERSION"
        testRuntimeOnly "ch.qos.logback:logback-classic:$LOGBACK_VERSION"
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
            showExceptions true
            showCauses true
            showStackTraces true
            exceptionFormat "full"
        }
    }

    dependencyCheck {
        autoUpdate = true
        format = 'ALL'

        nvd {
            apiKey = System.getenv("SANDEC_NVD_API_KEY")
        }

        outputDirectory = layout.buildDirectory.dir("reports/dependency-check").get().asFile
    }
}

configure([project("tree-showing"), project("jpro-auth:core"), project("jpro-auth:routing"), project("jpro-file"),
           project("jpro-image-manager"), project("jpro-mail"), project("jpro-mdfx"), project("jpro-media"),
           project("jpro-scenegraph"), project("jpro-session"), project("jpro-sipjs"),
           project("jpro-html-scrollpane"), project("freeze-detector"), project("jpro-routing:core"),
           project("jpro-routing:dev"), project("jpro-routing:popup"), project("jpro-webrtc"), project("jpro-youtube"),
           project("internal:openlink"), project("internal:util")]) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'tech.yanand.maven-central-publish'

    // Check if the parent of the current project is a subproject
    def isParentASubproject = project.parent != null && project.parent != rootProject

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = 'one.jpro.platform'

                if (project.path.startsWith(":internal")) {
                    artifactId = "jpro-${isParentASubproject ? "${project.parent.name}-${project.name}" : "${project.name}"}"
                } else {
                    artifactId = isParentASubproject ? "${project.parent.name}-${project.name}" : "${project.name}"
                }

                version = JPRO_PLATFORM_VERSION

                // Ensure only one component is included in the publication
                from components.java

                pom {
                    url = 'https://www.jpro.one'

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'jpro'
                            name = 'JPro Team'
                            email = 'info@jpro.one'
                            organization = 'JPro-one'
                            organizationUrl = 'https://www.jpro.one'
                        }
                    }

                    scm {
                        connection = 'scm:git:https://github.com/JPro-one/jpro-platform.git'
                        developerConnection = 'scm:git:https://github.com/JPro-one/jpro-platform.git'
                        url = "https://github.com/JPro-one/jpro-platform/tree/main/$project.name"
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/JPro-one/JPro-Platform/issues'
                    }
                }
            }
        }

        java {
            withSourcesJar()
            withJavadocJar()
        }

        repositories {
            maven {
                name = "artifactory"
                url = "https://sandec.jfrog.io/artifactory/repo"
                credentials {
                    username System.getenv("SANDEC_ARTIFACTORY_USERNAME")
                    password System.getenv("SANDEC_ARTIFACTORY_PASSWORD")
                }
            }
            maven {
                name = 'publish-bundle'
                url = layout.buildDirectory.dir('publish-bundle')
            }
        }
    }

    signing {
        useInMemoryPgpKeys (
                System.getenv("SANDEC_SIGNING_KEY_ID"),
                System.getenv("SANDEC_SIGNING_SECRET_KEY"),
                System.getenv("SANDEC_SIGNING_PASSWORD")
        )

        sign publishing.publications.mavenJava
    }

    mavenCentral {
        repoDir = layout.buildDirectory.dir('publish-bundle')
        authToken = System.getenv("MAVEN_CENTRAL_AUTH_TOKEN")
        publishingType = System.getenv("MAVEN_CENTRAL_PUBLISHING_TYPE") ?: 'USER_MANAGED'
    }
}
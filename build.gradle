def subprojectsWithDocs = [
        "jpro-auth",
        "jpro-file",
        "jpro-media",
        "jpro-routing"
]

tasks.register('combineDocumentation') {
    description = "Combines multiple subproject README.md files into a single DOCUMENTATION.md"
    group = "Documentation"

    // We'll store the final file in build/docs/DOCUMENTATION.md
    def outputFile = layout.buildDirectory.file("docs/DOCUMENTATION.md")
    outputs.file(outputFile)

    doLast {
        def combined = new StringBuilder()
        def readmeFile = file("$rootDir/README.md")
        combined.append(readmeFile.text).append("\n\n")
        subprojectsWithDocs.each { subprojectName ->
            def subProjectReadmeFile = file("$rootDir/$subprojectName/README.md")
            if (subProjectReadmeFile.exists()) {
                combined.append(subProjectReadmeFile.text).append("\n\n")
            }
        }

        // Ensure the docs folder exists
        outputFile.get().asFile.parentFile.mkdirs()

        // Write the final file
        outputFile.get().asFile.text = combined.toString()
    }
}

tasks.register('copyChangelog') {
    description = "Copy the root CHANGELOG.md to the build/docs directory"
    group = "Documentation"

    // Define the final output file location
    def changelogOutputFile = layout.buildDirectory.file("docs/CHANGELOG.md")

    // Mark it as an output, so Gradle knows about this file
    outputs.file(changelogOutputFile)

    doLast {
        // Ensure the parent folder exists
        changelogOutputFile.get().asFile.parentFile.mkdirs()

        // Copy from the root CHANGELOG.md to the target location
        file("$rootDir/CHANGELOG.md").withInputStream { input ->
            changelogOutputFile.get().asFile.withOutputStream { output ->
                output << input
            }
        }
    }
}

buildscript {
    repositories {
        gradlePluginPortal()
        maven {
            url "https://sandec.jfrog.io/artifactory/repo"
        }
    }

    dependencies {
        classpath "com.google.gradle:osdetector-gradle-plugin:$OSDETECTOR_PLUGIN_VERSION"
        classpath "org.openjfx:javafx-plugin:$JAVAFX_PLUGIN_VERSION"
        classpath "one.jpro:jpro-gradle-plugin:$JPRO_VERSION"
        classpath "org.owasp:dependency-check-gradle:$DEPENDENCY_CHECK_PLUGIN_VERSION"
        classpath "tech.yanand.gradle:maven-central-publish:$MAVEN_CENTRAL_PUBLISH_PLUGIN_VERSION"
    }
}

subprojects {
    apply plugin: 'java'

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenCentral()
        maven {
            url "https://sandec.jfrog.io/artifactory/repo"
        }
    }
}

configure(subprojects.findAll { it.name != 'example' }) {
    apply plugin: 'java-library'
    apply plugin: 'org.openjfx.javafxplugin'
    apply plugin: 'org.owasp.dependencycheck'

    javafx {
        version = "$JAVAFX_BUILD_VERSION"
        configurations = ["compileOnly", "testImplementation"]
        modules = ['javafx.graphics', 'javafx.controls', 'javafx.fxml', 'javafx.media', 'javafx.swing', 'javafx.web']
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:$JUNIT_VERSION"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:$JUNIT_VERSION"

        testImplementation "one.jpro:jmemorybuddy:$JMEMORYBUDDY_VERSION"
        testImplementation "one.jpro.platform.jpms:testfx-junit5:$TESTFX_VERSION"
        testImplementation "one.jpro.platform.jpms:testfx-core:$TESTFX_VERSION"
        //testImplementation "one.jpro.platform.jpms:openjfx-monocle:$MONOCLE_VERSION"
        testImplementation "org.testfx:openjfx-monocle:$MONOCLE_VERSION"
        testImplementation "org.mockito:mockito-core:$MOCKITO_VERSION"
        testImplementation "org.mockito:mockito-junit-jupiter:$MOCKITO_VERSION"
        testImplementation "org.hamcrest:hamcrest:$HAMCREST_VERSION"
        testImplementation "org.assertj:assertj-core:$ASSERTJ_VERSION"
        testRuntimeOnly "ch.qos.logback:logback-classic:$LOGBACK_VERSION"
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "passed", "skipped", "failed"
            showStandardStreams = true
            showExceptions true
            showCauses true
            showStackTraces true
            exceptionFormat "full"
        }
    }

    dependencyCheck {
        autoUpdate = true
        format = 'ALL'

        nvd {
            apiKey = System.getenv("SANDEC_NVD_API_KEY")
        }

        outputDirectory = layout.buildDirectory.dir("reports/dependency-check").get().asFile
    }
}

configure([project("jpro-auth:core"), project("jpro-auth:routing"), project("jpro-file"),
           project("jpro-image-manager"), project("jpro-mail"), project("jpro-mdfx"), project("jpro-media"),
           project("jpro-scenegraph"), project("jpro-session"), project("jpro-sipjs"), project("jpro-utils"),
           project("jpro-html-scrollpane"), project("jpro-routing:core"), project("jpro-routing:dev"),
           project("jpro-routing:popup"), project("jpro-webrtc"), project("jpro-youtube"),
           rootProject]) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    apply plugin: 'tech.yanand.maven-central-publish'

    // Check if the parent of the current project is a subproject
    def isParentASubproject = project.parent != null && project.parent != rootProject

    publishing {
        publications {
            mavenJava(MavenPublication) {
                groupId = 'one.jpro.platform'
                artifactId = isParentASubproject ? "${project.parent.name}-${project.name}" : "${project.name}"
                version = JPRO_PLATFORM_VERSION

                if (artifactId == rootProject.name) { // Only the root project
                    // Attach the combined DOCUMENTATION.md
                    artifact(tasks.named("combineDocumentation")) {
                        // So Gradle knows it must run combineDocumentation first
                        builtBy tasks.named("combineDocumentation")
                        classifier = 'DOCUMENTATION'
                        extension = 'md'
                    }

                    // Attach the root CHANGELOG.md
                    artifact(tasks.named("copyChangelog")) {
                        builtBy tasks.named("copyChangelog")
                        classifier = 'CHANGELOG'
                        extension = 'md'
                    }
                } else {
                    // Ensure only one component is included in the publication
                    from components.java
                }

                pom {
                    name = 'JPro Platform'
                    description = 'JPro Platform is a collection of modules that allows you to create ' +
                            'cross-platform JavaFX application applications that also run in the browser.'
                    url = 'https://www.jpro.one'

                    licenses {
                        license {
                            name = 'Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'jpro'
                            name = 'JPro Team'
                            email = 'info@jpro.one'
                            organization = 'JPro-one'
                            organizationUrl = 'https://www.jpro.one'
                        }
                    }

                    scm {
                        connection = 'scm:git:https://github.com/JPro-one/jpro-platform.git'
                        developerConnection = 'scm:git:https://github.com/JPro-one/jpro-platform.git'
                        url = "https://github.com/JPro-one/jpro-platform/tree/main/$project.name"
                    }

                    issueManagement {
                        system = 'GitHub'
                        url = 'https://github.com/JPro-one/JPro-Platform/issues'
                    }
                }
            }
        }

        if (project.name != rootProject.name) { // Only the subprojects
            java {
                withSourcesJar()
                withJavadocJar()
            }
        }

        repositories {
            maven {
                name = "artifactory"
                url = "https://sandec.jfrog.io/artifactory/repo"
                credentials {
                    username System.getenv("SANDEC_ARTIFACTORY_USERNAME")
                    password System.getenv("SANDEC_ARTIFACTORY_PASSWORD")
                }
            }
            maven {
                name = 'publish-bundle'
                url = layout.buildDirectory.dir('publish-bundle')
            }
        }
    }

    signing {
        useInMemoryPgpKeys (
                System.getenv("SANDEC_SIGNING_KEY_ID"),
                System.getenv("SANDEC_SIGNING_SECRET_KEY"),
                System.getenv("SANDEC_SIGNING_PASSWORD")
        )

        sign publishing.publications.mavenJava
    }

    mavenCentral {
        repoDir = layout.buildDirectory.dir('publish-bundle')
        authToken = System.getenv("MAVEN_CENTRAL_AUTH_TOKEN")
        publishingType = System.getenv("MAVEN_CENTRAL_PUBLISHING_TYPE") ?: 'USER_MANAGED'
    }
}